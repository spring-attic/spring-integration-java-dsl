buildscript {
	repositories {
		maven { url 'https://repo.spring.io/plugins-release' }
	}
	dependencies {
		classpath 'io.spring.gradle:dependency-management-plugin:1.0.2.RELEASE'
		classpath 'io.spring.gradle:spring-io-plugin:0.0.7.RELEASE'
	}
}

plugins {
	id 'java'
	id 'eclipse'
	id 'idea'
	id 'jacoco'
	id 'org.sonarqube' version '2.5'
	id 'checkstyle'
}

description = 'Spring Integration Java DSL'

apply from: "${rootProject.projectDir}/publish-maven.gradle"

group = 'org.springframework.integration'

repositories {
	if (version.endsWith('BUILD-SNAPSHOT') || project.hasProperty('platformVersion')) {
		maven { url 'https://repo.spring.io/libs-snapshot' }
	}
	maven { url 'https://repo.spring.io/libs-milestone' }
//	maven { url 'https://repo.spring.io/libs-staging-local' }
}

if (project.hasProperty('platformVersion')) {
	apply plugin: 'spring-io'

	dependencyManagement {
		springIoTestRuntime {
			imports {
				mavenBom "io.spring.platform:platform-bom:${platformVersion}"
			}

		}
	}
}

compileJava {
	sourceCompatibility = 1.6
	targetCompatibility = 1.6
}

compileTestJava {
	sourceCompatibility = 1.8
}

ext {
	activeMqVersion = '5.13.3'
	apacheSshdVersion = '1.4.0'
	commonsDbcpVersion = '1.4'
	commonsHttpClientVersion = '4.5.2'
	embedMongoVersion = '1.50.5'
	ftpServerVersion = '1.0.6'
	hsqldbVersion = '2.3.3'
	jmsApiVersion = '1.1-rev-1'
	jpaApiVersion = '2.1.1'
	jrubyVersion = '1.7.25'
	jythonVersion = '2.7.0'
	kafkaVersion = '0.8.2.2'
	mailVersion = '1.5.5'
	reactiveStreamsVersion = '1.0.0'
	reactorVersion = '2.0.8.RELEASE'
	slf4jVersion = '1.7.25'
	springIntegrationVersion = project.hasProperty('siVersion') ? project.siVersion : '4.3.12.RELEASE'
	springIntegrationKafkaVersion = '2.1.1.RELEASE'
	springKafkaVersion = '1.1.6.RELEASE'
	springBootVersion = '1.5.6.RELEASE'
	testNgVersion = '6.8.21'
	tomcatVersion = '8.5.2'

	linkHomepage = 'https://github.com/spring-projects/spring-integration-java-dsl'
	linkCi = 'https://build.spring.io/browse/INTEXT-SIJD'
	linkIssue = 'https://jira.spring.io/browse/INTEXT'
	linkScmUrl = 'https://github.com/spring-projects/spring-integration-java-dsl'
	linkScmConnection = 'https://github.com/spring-projects/spring-integration-java-dsl.git'
	linkScmDevConnection = 'git@github.com:spring-projects/spring-integration-java-dsl.git'
}

eclipse.project.natures += 'org.springframework.ide.eclipse.core.springnature'

jacoco {
	toolVersion = "0.7.9"
}

dependencies {
	compile("org.springframework.integration:spring-integration-core:$springIntegrationVersion")
	compile "org.reactivestreams:reactive-streams:$reactiveStreamsVersion"

	['spring-integration-amqp'
	 , 'spring-integration-event'
	 , 'spring-integration-feed'
	 , 'spring-integration-ftp'
	 , 'spring-integration-groovy'
	 , 'spring-integration-http'
	 , 'spring-integration-jdbc'
	 , 'spring-integration-jms'
	 , 'spring-integration-jmx'
	 , 'spring-integration-jpa'
	 , 'spring-integration-mail'
	 , 'spring-integration-mongodb'
	 , 'spring-integration-mqtt'
	 , 'spring-integration-redis'
	 , 'spring-integration-rmi'
	 , 'spring-integration-security'
	 , 'spring-integration-sftp'
	 , 'spring-integration-stream'
	 , 'spring-integration-syslog'
	 , 'spring-integration-twitter'
	 , 'spring-integration-ws'
	 , 'spring-integration-xml'
	 , 'spring-integration-xmpp'].each {
		compile("org.springframework.integration:$it:$springIntegrationVersion", optional)
	}

	compile("org.springframework.integration:spring-integration-kafka:$springIntegrationKafkaVersion", optional)

	compile("org.springframework.integration:spring-integration-gemfire:$springIntegrationVersion") {
		optional it
		exclude group: 'org.apache.tomcat.embed', module: 'tomcat-embed-jasper'
		exclude group: 'org.apache.tomcat.embed', module: 'tomcat-embed-logging-juli'
		exclude group: 'org.apache.logging.log4j', module: 'log4j-api'
		exclude group: 'org.apache.logging.log4j', module: 'log4j-core'
	}

	compile("javax.jms:jms-api:$jmsApiVersion", provided)
	compile("javax.mail:javax.mail-api:$mailVersion", provided)

	compile ("org.eclipse.persistence:javax.persistence:$jpaApiVersion", optional)

	testCompile "org.springframework.integration:spring-integration-test:$springIntegrationVersion"
	testCompile "org.springframework.kafka:spring-kafka-test:$springKafkaVersion"

	testCompile("org.springframework.boot:spring-boot-starter-web:$springBootVersion") {
		exclude module: 'spring-boot-starter-logging'
	}
	testCompile ("org.springframework.boot:spring-boot-starter-security:$springBootVersion")  {
		exclude module: 'spring-boot-starter-logging'
	}
	testCompile ("org.springframework.boot:spring-boot-starter-data-jpa:$springBootVersion") {
		exclude module: 'spring-boot-starter-logging'
	}

	testCompile "org.springframework.boot:spring-boot-starter-test:$springBootVersion"

	testCompile "de.flapdoodle.embed:de.flapdoodle.embed.mongo:$embedMongoVersion"
	testCompile "org.apache.ftpserver:ftpserver-core:$ftpServerVersion"
	testCompile "org.apache.sshd:sshd-core:$apacheSshdVersion"

	testCompile("org.reactivestreams:reactive-streams-tck:$reactiveStreamsVersion") {
		exclude group: 'org.reactivestreams', module: 'reactive-streams-examples'
	}
	testCompile "io.projectreactor:reactor-stream:$reactorVersion"
	testCompile "org.testng:testng:$testNgVersion"
	testCompile "org.apache.activemq:activemq-broker:$activeMqVersion"

	testRuntime "org.slf4j:slf4j-log4j12:$slf4jVersion"
	testRuntime "com.sun.mail:javax.mail:$mailVersion"
	testRuntime "org.hsqldb:hsqldb:$hsqldbVersion"
	testRuntime "commons-dbcp:commons-dbcp:$commonsDbcpVersion"
	testRuntime "org.jruby:jruby:$jrubyVersion"
	testRuntime "org.python:jython-standalone:$jythonVersion"
	testRuntime "org.apache.tomcat.embed:tomcat-embed-logging-log4j:$tomcatVersion"
	testRuntime "org.apache.httpcomponents:httpclient:$commonsHttpClientVersion"


}

// enable all compiler warnings; individual projects may customize further
[compileJava, compileTestJava]*.options*.compilerArgs = ['-Xlint:all,-options,-processing']

test {
	jacoco {
		append = false
		destinationFile = file("$buildDir/jacoco.exec")
	}
}

tasks.withType(Test).all {
	// suppress all console output during testing unless running `gradle -i`
	logging.captureStandardOutput(LogLevel.INFO)
	maxHeapSize = '1024m'
}

checkstyle {
	configFile = file("${rootDir}/src/checkstyle/checkstyle.xml")
	toolVersion = '8.0'
}

jacocoTestReport {
	reports {
		xml.enabled false
		csv.enabled false
		html.destination file("${buildDir}/reports/jacoco/html")
	}
}

check.dependsOn javadoc
build.dependsOn jacocoTestReport

task sourcesJar(type: Jar) {
	classifier = 'sources'
	from sourceSets.main.allJava
}

task javadocJar(type: Jar) {
	classifier = 'javadoc'
	from javadoc
}

artifacts {
	archives sourcesJar
	archives javadocJar
}

sonarqube {
	properties {
		property "sonar.jacoco.reportPath", "${buildDir.name}/jacoco.exec"
		property "sonar.links.homepage", linkHomepage
		property "sonar.links.ci", linkCi
		property "sonar.links.issue", linkIssue
		property "sonar.links.scm", linkScmUrl
		property "sonar.links.scm_dev", linkScmDevConnection
		property "sonar.java.coveragePlugin", "jacoco"
	}
}

javadoc {
	group = 'Documentation'
	description = 'Generates the Javadoc API documentation.'
	title = "${rootProject.description} ${version} API"
	options.memberLevel = org.gradle.external.javadoc.JavadocMemberLevel.PROTECTED
	options.author = true
	options.header = rootProject.description
	options.overview = 'src/api/overview.html'
	options.stylesheetFile = file("src/api/stylesheet.css")

	source = sourceSets.main.allJava
	classpath = project.sourceSets.main.compileClasspath
	destinationDir = new File(buildDir, "api")
}

task docsZip(type: Zip) {
	group = 'Distribution'
	classifier = 'docs'
	description = "Builds -${classifier} archive containing the api " +
			"for deployment at static.springframework.org/spring-integration/docs."

	from(javadoc) {
		into 'api'
	}
}

task distZip(type: Zip, dependsOn: docsZip) {
	group = 'Distribution'
	classifier = 'dist'
	description = "Builds -${classifier} archive, containing all jars and docs, " +
			"suitable for community download page."

	ext.baseDir = "${project.name}-${project.version}";

	from('src/dist') {
		include 'license.txt'
		include 'notice.txt'
		into "${baseDir}"
	}

	from(zipTree(docsZip.archivePath)) {
		into "${baseDir}/docs"
	}

	into("${baseDir}/libs") {
		from project.jar
		from project.sourcesJar
		from project.javadocJar
	}
}

// Create an optional "with dependencies" distribution.
// Not published by default; only for use when building from source.
task depsZip(type: Zip, dependsOn: distZip) { zipTask ->
	group = 'Distribution'
	classifier = 'dist-with-deps'
	description = "Builds -${classifier} archive, containing everything " +
			"in the -${distZip.classifier} archive plus all dependencies."

	from zipTree(distZip.archivePath)

	gradle.taskGraph.whenReady { taskGraph ->
		if (taskGraph.hasTask(":${zipTask.name}")) {
			def projectName = rootProject.name
			def artifacts = new HashSet()

			rootProject.configurations.runtime.resolvedConfiguration.resolvedArtifacts.each { artifact ->
				def dependency = artifact.moduleVersion.id
				if (!projectName.equals(dependency.name)) {
					artifacts << artifact.file
				}
			}

			zipTask.from(artifacts) {
				into "${distZip.baseDir}/deps"
			}
		}
	}
}

artifacts {
	archives distZip
	archives docsZip
}

task dist(dependsOn: assemble) {
	group = 'Distribution'
	description = 'Builds -dist, -docs and distribution archives.'
}
